{"version":3,"sources":["components/Wrapper/index.js","components/Header/index.js","config/AppConfig.js","services/JobService.js","components/JobImage/index.js","components/JobHeader/index.js","components/JobMainInfo/index.js","components/JobInfoList/index.js","utils/Utils.js","components/JobButton/index.js","components/JobCard/JobCard.js","components/JobCarousel/index.js","App.js","index.js"],"names":["Wrapper","props","className","children","Header","href","src","alt","workerProfile","firstName","lastName","AppConfig","JobService","console","error","axios","get","res","data","jobId","JobImage","jobImage","JobTitle","JobHeader","jobTitle","company","JobMainInfo","distance","hourlyRateInDollar","shiftIcon","icon","faCalendarAlt","size","locationIcon","faMapMarkerAlt","requirementIcon","faTools","reportIcon","faUser","JobInfoList","shiftDates","length","map","shiftDate","key","startDate","start","end","dateStart","moment","format","dateEnd","formatShiftDate","endDate","location","requirements","requirement","reportTo","name","phone","JobButton","alert","useAlert","theme","onClick","show","message","type","JobCard","useState","acceptList","setAcceptList","setRejectList","useEffect","a","getAcceptList","getRejectList","rejectList","acceptMessage","JobCarousel","jobs","Carousel","worker","Item","imageUrl","milesToTravel","toFixed","wagePerHourInCents","shifts","address","formattedAddress","workerId","App","setWorkerProfile","jobList","setJobList","getWorkerProfile","getJobList","options","position","positions","MIDDLE","timeout","offset","transition","transitions","SCALE","types","SUCCESS","Root","template","AlertTemplate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7778856.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\"\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n// main header for the page\nfunction Header(props) {\n    return (\n        <header className=\"header\">\n            <nav className=\"navbar navbar-dark bg-dark\">\n                <a className=\"navbar-brand\" href=\"https://www.swipejobs.com/\">\n                    <img src=\"../img/swipeJobsLogo.png\" className=\"logo\" alt=\"swipejobs-logo\"></img>\n                </a>\n                <span className=\"navbar-text text-white\">\n                    <b>{props.workerProfile.firstName} {props.workerProfile.lastName}</b>\n                </span>\n            </nav>\n        </header>\n    );\n}\n\nexport default Header;","// config with global information for the app\nexport const AppConfig = {\n    apiUrl: 'https://test.swipejobs.com/api',\n    workerId: '7f90df6e-b832-44e2-b624-3143d428001f'\n}\n","import axios from \"axios\";\nimport { AppConfig } from '../config/AppConfig';\n\n// class containing main services for the app\nexport class JobService {\n    static async getJobList() {\n        try {\n            if (!AppConfig.workerId) {\n                console.error('worker id not provided');\n                return null;\n            }\n            const res = await axios.get(`${AppConfig.apiUrl}/worker/${AppConfig.workerId}/matches`);\n            return res.data;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n    static async getWorkerProfile() {\n        try {\n            if (!AppConfig.workerId) {\n                console.error('worker id not provided');\n                return null;\n            }\n            const res = await axios.get(`${AppConfig.apiUrl}/worker/${AppConfig.workerId}/profile`);\n            return res.data;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n    static async getAcceptList(jobId) {\n        try {\n            if (!AppConfig.workerId) {\n                console.error('worker id not provided');\n                return null;\n            }\n            const res = await axios.get(`${AppConfig.apiUrl}/worker/${AppConfig.workerId}/job/${jobId}/accept`);\n            return res.data;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n    static async getRejectList(jobId) {\n        try {\n            if (!AppConfig.workerId) {\n                console.error('worker id not provided');\n                return null;\n            }\n            const res = await axios.get(`${AppConfig.apiUrl}/worker/${AppConfig.workerId}/job/${jobId}/reject`);\n            return res.data;\n        } catch (error) {\n            console.error(error);\n            return null;\n        }\n    }\n}\n","import React from \"react\";\n\nfunction JobImage(props) {\n    return (\n        <img\n            src={props.jobImage}\n            className=\"card-img-top\"\n            alt={props.JobTitle}>\n        </img>\n    )\n}\n\nexport default JobImage;\n","import React from \"react\";\nimport \"./styles.css\"\n\nfunction JobHeader(props) {\n  return (\n    <div className=\"job-header\">\n      <h5 className=\"card-title\">{props.jobTitle}</h5>\n      <p className=\"card-text\">{props.company}</p>\n    </div>\n  )\n}\n\nexport default JobHeader;\n","import React from \"react\";\nimport \"./styles.css\"\n\nfunction JobMainInfo(props) {\n  return (\n    <div className=\" main-info\">\n      <div className=\"row\">\n        <div className=\"col-auto mr-auto\"><p className=\"mainInfo\">Distance</p></div>\n        <div className=\"col-auto\"><p className= \"mainInfo\">Hourly Rate</p></div>\n        <div className=\"w-100\"></div>\n        <div className=\"col-auto mr-auto\"><p className=\"card-text info\">{props.distance} miles</p></div>\n  <div className=\"col-auto\"><p className=\"card-text info\">${props.hourlyRateInDollar}</p></div>\n      </div>\n      \n      \n    </div>\n  )\n}\n\nexport default JobMainInfo;\n","import React from \"react\"\nimport \"./styles.css\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCalendarAlt, faMapMarkerAlt, faTools, faUser } from '@fortawesome/free-solid-svg-icons'\nimport { formatShiftDate } from '../../utils/Utils';\n\n// Bulk information about each position\n\n// icons for each section\nconst shiftIcon = <FontAwesomeIcon icon={faCalendarAlt} size=\"lg\" />\nconst locationIcon = <FontAwesomeIcon icon={faMapMarkerAlt} size=\"lg\" />\nconst requirementIcon = <FontAwesomeIcon icon={faTools} size=\"lg\" />\nconst reportIcon = <FontAwesomeIcon icon={faUser} size=\"lg\" />\n\n\nfunction JobInfoList(props) {\n  // render the shift dates in a list based on the array of shifts for that position\n  const renderShiftDates = () => {\n    if (props.shiftDates && props.shiftDates.length > 0) {\n      return props.shiftDates.map(shiftDate => {\n        return (\n          <li key={shiftDate.startDate}>\n            {formatShiftDate(shiftDate.startDate, shiftDate.endDate)}\n          </li>)\n      })\n    }\n    return null;\n  }\n  // render the requirements in a list based on the array of requirements for that position\n  const renderRequirements = () => {\n    if (props.requirements && props.requirements.length > 0) {\n      return props.requirements.map(requirement => <li key={requirement}>{requirement}</li>);\n    };\n    return <li>No requirements for this position.</li>\n  };\n\n  return (\n\n    <ul className=\"list-group list-group-flush\">\n      <li className=\"list-group-item\">\n        <div className=\"row\">\n          <div className=\"col-2 align-self-center\">\n            {shiftIcon}\n          </div>\n          <div className=\"col-8\">\n            <div className=\"row\">\n              <p className=\"infoTitles\">Shift Dates</p>\n            </div>\n            <div className=\"row\">\n              <ul>\n                {renderShiftDates()}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </li>\n      <li className=\"list-group-item\">\n        <div className=\"row\">\n          <div className=\"col-2 align-self-center\">\n            {locationIcon}\n          </div>\n          <div className=\"col-8\">\n            <div className=\"row\">\n              <p className=\"infoTitles\">Location</p>\n            </div>\n            <div className=\"row\">\n              {props.location}\n            </div>\n          </div>\n        </div>\n      </li>\n      <li className=\"list-group-item\">\n        <div className=\"row\">\n          <div className=\"col-2 align-self-center\">\n            {requirementIcon}\n          </div>\n          <div className=\"col-8\">\n            <div className=\"row\">\n              <p className=\"infoTitles\">Requirements</p>\n            </div>\n            <div className=\"row\">\n              <ul>\n                {renderRequirements()}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </li>\n      <li className=\"list-group-item\">\n        <div className=\"row\">\n          <div className=\"col-2 align-self-center\">\n            {reportIcon}\n          </div>\n          <div className=\"col-8\">\n            <div className=\"row\">\n              <p className=\"infoTitles\">Report To</p>\n            </div>\n            <div className=\"row\">\n              {props.reportTo.name} {props.reportTo.phone}\n            </div>\n          </div>\n        </div>\n      </li>\n    </ul>\n  )\n}\n\nexport default JobInfoList;\n","import moment from 'moment';\n// file containing methods to be used within the app\n\n// this method formats the shift dates from ISO format to the required format\n// and will return null if invalid date is provided\nexport const formatShiftDate = (start, end) => {\n    if (!start || !end) {\n        return null;\n    }\n\n    const dateStart = moment(start).format('MMM Do , h:mm A');\n    const dateEnd = moment(end).format('h:mm A');\n\n    return ` ${dateStart} - ${dateEnd} `;\n}\n\n// this method formats the distance from 3 decimals to 2 decimals\n// and will return 0 if invalid rate is provided\nexport const formatDistance = milesToTravel => {\n    if(!milesToTravel) {\n        return 0.00;\n    }\n    return milesToTravel.toFixed(2);\n}\n\n// this method formats rate based on wage per hour in cents\n// and will return 0 if invalid rate is provided\nexport const formatRate = wagePerHourInCents => {\n    if (!wagePerHourInCents) {\n        return 0.00;\n    }\n    return (wagePerHourInCents / 100).toFixed(2);\n}\n\n\n","import React from \"react\";\nimport { useAlert } from 'react-alert'\n// buttons for job acceptance or rejection\nfunction JobButton(props) {\n    const alert = useAlert()\n\n    const theme = `btn btn-${props.theme}`\n    return (\n        <button\n            onClick={() => {\n                alert.show(props.message)\n            }}\n            type=\"button\"\n            className={theme}>\n            {props.name}\n        </button>\n    )\n}\n\nexport default JobButton;\n","import React, { useState, useEffect } from \"react\";\nimport { JobService } from '../../services/JobService';\nimport JobImage from \"../JobImage/index\";\nimport JobHeader from \"../JobHeader/index\";\nimport JobMainInfo from \"../JobMainInfo/index\";\nimport JobInfoList from \"../JobInfoList/index\";\nimport JobButton from \"../JobButton/index\";\n\n// Job card displayed specific per each position\nfunction JobCard(props) {\n    // call backs to accept and reject URLs using JobServices.js\n    const [acceptList, setAcceptList] = useState([]);\n    const [rejectList, setRejectList] = useState([]);\n\n    useEffect(async () => {\n        const acceptList = await JobService.getAcceptList(props.jobId)\n        if (acceptList) {\n            setAcceptList(acceptList);\n        }\n        const rejectList = await JobService.getRejectList();\n        if (rejectList) {\n            setRejectList(rejectList);\n        }\n    }, []);\n    // messages to be displayed when JobButon is clicked\n    const acceptMessage = (acceptList.message ? acceptList.message : \"Thanks, position accepted successfully.\");\n    const rejectMessage = \"Thanks, position rejected successfully.\";\n\n    return (\n        <div className=\"card jobCard\" >\n            <JobImage\n                jobImage={props.jobImage}\n                jobTitle={props.jobTitle}\n            />\n            <JobHeader\n                jobTitle={props.jobTitle}\n                company={props.company}\n            />\n            <JobMainInfo\n                distance={props.distance}\n                hourlyRateInDollar={props.hourlyRateInDollar}\n            />\n            <JobInfoList\n                shiftDates={props.shiftDates}\n                location={props.location}\n                reportTo={props.reportTo}\n                requirements={props.requirements}\n            />\n            <div className=\"card-body d-flex justify-content-around\">\n                <JobButton theme=\"light\" message={rejectMessage} name={\"No Thanks\"} />\n                <JobButton theme=\"dark\" message={acceptMessage} name={\"I'II Take it\"} />\n            </div>\n        </div>\n    );\n}\n\nexport default JobCard;","import React from \"react\";\nimport JobCard from \"../JobCard/JobCard.js\";\nimport { Carousel } from \"react-bootstrap\";\nimport \"./styles.css\"\nimport { formatDistance, formatRate } from \"../../utils/Utils.js\";\n\n// Main carousel populated with one job card per each position\nfunction JobCarousel(props) {\n    const { jobs } = props;\n\n    return (\n        <div>\n            <div className='container-fluid carousel-container' >\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <Carousel>\n                            {jobs && jobs.map(worker => (\n                                <Carousel.Item key={worker.jobId}>\n                                    <JobCard\n                                        jobId={worker.jobId}\n                                        jobImage={worker.jobTitle.imageUrl}\n                                        jobTitle={worker.jobTitle.name}\n                                        company={worker.company.name}\n                                        distance={formatDistance(worker.milesToTravel)}\n                                        hourlyRateInDollar={formatRate(worker.wagePerHourInCents)}\n                                        shiftDates={worker.shifts}\n                                        location={worker.company.address.formattedAddress}\n                                        reportTo={worker.company.reportTo}\n                                        requirements={worker.requirements}\n                                        workerId={props.workerId}\n                                    />\n                                </Carousel.Item>\n                            ))}\n                        </Carousel>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default JobCarousel;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper/index\";\nimport Header from \"./components/Header/index.js\";\nimport JobCarousel from \"./components/JobCarousel\";\nimport { JobService } from './services/JobService';\n\nfunction App() {\n  // API call backs to workerProfile and jobList URLs using JobServices.js\n  const [workerProfile, setWorkerProfile] = useState([]);\n  const [jobList, setJobList] = useState([]);\n\n  useEffect(async () => {\n    const workerProfile = await JobService.getWorkerProfile()\n    if (workerProfile) {\n      setWorkerProfile(workerProfile);\n    }\n    const jobs = await JobService.getJobList();\n    if (jobs) {\n        setJobList(jobs);\n    }\n  }, []);\n\n  return (\n    <Wrapper>\n      <Header workerProfile={workerProfile} />\n      <JobCarousel jobs={jobList} />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { types, transitions, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// options to customise the alert showed when the Jobbutton is clicked\nconst options = {\n  position: positions.MIDDLE,\n  timeout: 5000,\n  offset: '30px',\n  transition: transitions.SCALE,\n  type: types.SUCCESS\n}\n// this enables the alert to be used on the Jobbutton\nconst Root = () => (\n  <AlertProvider template={AlertTemplate} {...options}>\n    <App />\n  </AlertProvider>\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}